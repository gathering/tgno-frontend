---
import "leaflet/dist/leaflet.css";
import {
  calculateRow,
  calculateColumn,
  getStandSize,
  stringToSize,
  rotateCords,
  getStandPolygon,
  slugifyMapItemName,
} from "../../utils/map";
import TgMap from "../../components/map/TgMap.astro";
import type { MapItem, PartialMapItem } from "../../types";
import Layout from "../../layouts/Layout.astro";
import TgMapNavItem from "../../components/map/TgMapNavItem.astro";
import H3 from "../../components/H3.astro";

type MapItemBase = Pick<PartialMapItem, "name"> &
  Partial<Omit<PartialMapItem, "name">>;

type LocationMap = Record<string, MapItemBase>;

const STANDS = {
  amberTattoo: {
    name: "Amber Tattoo",
    presentation: {
      type: "stand",
    },
  },
  eHeroic: {
    name: "E-Heroic",
    presentation: {
      type: "stand",
    },
  },
  eNidaros: {
    name: "E-Nidaros",
    presentation: {
      type: "stand",
    },
  },
  eHamar: {
    name: "E-Hamar",
    presentation: {
      type: "stand",
    },
  },
  eUiaKraken: {
    name: "E-UiA Kraken",
    presentation: {
      type: "stand",
    },
  },
  eEinHerjar: {
    name: "E-Einherjar",
    presentation: {
      type: "stand",
    },
  },
  kia: {
    icon: "/tg25/sponsors/kia_white.svg",
    name: "Kia",
    presentation: {
      type: "stand",
    },
  },
  nettpatruljen: {
    name: "Nettpatruljen",
    presentation: {
      type: "stand",
    },
  },
  bjerkely: {
    name: "Bjerkely",
    presentation: {
      type: "stand",
    },
  },
  smashNorge: {
    name: "Smash Norge",
    presentation: {
      type: "stand",
    },
  },
  biblogames: {
    name: "Biblogames",
    presentation: {
      type: "stand",
    },
  },
  hellRobotics: {
    name: "Hell Robotics",
    presentation: {
      type: "stand",
    },
  },
  telenor: {
    icon: "/tg25/sponsors/telenor.svg",
    name: "Telenor",
    presentation: {
      type: "stand",
    },
  },
  hamarKommune: {
    name: "Hamar Kommune",
    presentation: {
      type: "stand",
    },
  },
  ncl: {
    name: "NCL",
    presentation: {
      type: "stand",
    },
  },
  lundheim: {
    name: "Lundheim",
    presentation: {
      type: "stand",
    },
  },
  nordmore: {
    name: "Nordm√∏re",
    presentation: {
      type: "stand",
    },
  },
  trust: {
    name: "Trust",
    presentation: {
      type: "stand",
    },
  },
  riotGames: {
    icon: "/tg25/sponsors/riot_white.svg",
    name: "Riot Games",
    presentation: {
      type: "stand",
    },
  },
  tech: {
    name: "Arena:Tech",
    presentation: {
      type: "stand",
    },
  },
  nlogic: {
    icon: "/tg25/sponsors/nlogic.svg",
    name: "nLogic",
    presentation: {
      type: "stand",
    },
  },
  metalheads: {
    name: "Metalheads",
    presentation: {
      type: "stand",
    },
  },
  dicetrolls: {
    name: "Dicetrolls",
    presentation: {
      type: "stand",
    },
  },
  ungNo: {
    name: "ung.no",
    presentation: {
      type: "stand",
    },
  },
  kred: {
    name: "KRED",
    presentation: {
      type: "stand",
    },
  },
  tineMRiis: {
    name: "Tine M. Riis",
    presentation: {
      type: "stand",
    },
  },
  spillexpo: {
    name: "Spillexpo",
    presentation: {
      type: "stand",
    },
  },
  hado: {
    name: "HADO",
    presentation: {
      type: "stand",
    },
  },
  outland: {
    name: "Outland",
    presentation: {
      type: "stand",
    },
  },
  // TODO....
  kandu: {
    icon: "/tg25/sponsors/kandu.svg",
    name: "KANDU",
    presentation: {
      type: "stand",
    },
  },
  nexthop: {
    icon: "/tg25/sponsors/nexthop.svg",
    name: "NextHop",
    presentation: {
      type: "stand",
    },
  },
  placeholder: {
    name: "Placeholder",
    presentation: {
      type: "placeholder",
    },
  },
} as const satisfies LocationMap;

const FOOD = {
  monkys: {
    name: "Monky's",
    presentation: {
      type: "food",
    },
  },
  gordita: {
    name: "Gordita",
    presentation: {
      type: "food",
    },
  },
  pizzabakeren: {
    name: "Pizzabakeren",
    presentation: {
      type: "food",
    },
  },
  waffleFactory: {
    name: "Waffle Factory",
    presentation: {
      type: "food",
    },
  },
} as const satisfies LocationMap;

const ATTRACTIONS = {
  streamerLounge: {
    name: "Studio and production area",
    presentation: {
      type: "unknown",
    },
  },
  streamers: {
    name: "Streamers",
    presentation: {
      type: "stand",
    },
  },
  chillout: {
    icon: "/tg25/sponsors/kandu.svg",
    name: "Chillout",
    slug: "chillout",
    presentation: {
      type: "stand",
    },
  },
  tgHack: {
    name: "TG:Hack",
    slug: "tghack",
    presentation: {
      type: "stand",
    },
  },
  compoInfo: {
    name: "Creative og Game infodesk",
    slug: "compoinfo",
    presentation: {
      type: "stand",
    },
  },
  tgShop: {
    name: "TG Shop",
    slug: "tgshop",
    presentation: {
      type: "stand",
    },
  },
  infodesk: {
    name: "Informasjon (Infodesk)",
    slug: "infodesk",
    presentation: {
      type: "stand",
    },
  },
  support: {
    name: "Techsupport",
    slug: "support",
    presentation: {
      type: "stand",
    },
  },
} as const satisfies LocationMap;

const STAGES = {
  mainStage: {
    icon: "https://www.tg.no/tg25/tg25_square_white.svg",
    name: "Hovedscenen",
    slug: "hovedscenen",
    presentation: {
      type: "stage",
      calendarQuery: ["hovedscenen"],
      padding: 40,
    },
  },
  eSportStage: {
    icon: "https://www.tg.no/tg25/tg25_square_white.svg",
    name: "Esportscenen",
    slug: "esportscenen",
    presentation: {
      type: "stage",
      calendarQuery: ["esportscenen"],
      padding: 40,
    },
  },
  creativiaStage: {
    icon: "https://www.tg.no/tg25/tg25_square_white.svg",
    name: "Kreativiascenen",
    slug: "kreativiascenen",
    presentation: {
      type: "stage",
      calendarQuery: ["kreativiascenen"],
      padding: 40,
    },
  },
} as const satisfies LocationMap;

const SIZES = {
  small: getStandSize("3x3"),
  medium: getStandSize("6x6"),
  long: getStandSize("6x3"),
  longVertical: getStandSize("3x6"),
  superlongVertical: getStandSize("3x9"),
} as const satisfies Record<string, { width: number; height: number }>;

const LOCATIONS: MapItem[] = [
  // Expo outer curve
  ...[
    {
      ...STANDS.amberTattoo,
      ...SIZES.longVertical,
      pos: { x: 268, y: 1298 },
    },
    {
      ...STANDS.eHeroic,
      ...SIZES.longVertical,
      pos: { x: 270, y: 1398 },
    },
    {
      ...STANDS.eNidaros,
      ...SIZES.longVertical,
      pos: { x: 294.5, y: 1499 },
    },
    {
      ...STANDS.eHamar,
      ...SIZES.longVertical,
      pos: { x: 340.5, y: 1591.5 },
    },
    {
      ...STANDS.eUiaKraken,
      ...SIZES.longVertical,
      pos: { x: 405, y: 1674 },
    },
    {
      ...STANDS.eEinHerjar,
      ...SIZES.longVertical,
      pos: { x: 485, y: 1742 },
    },
  ].map((item, index) => {
    const polygon = getStandPolygon("3x6");

    return {
      ...item,
      polygon: rotateCords(polygon[0], polygon, 12 * index),
    };
  }),

  // Top left expo cluster
  ...calculateRow([
    {
      ...STANDS.lundheim,
      ...SIZES.small,
      pos: { x: 576.3, y: 1644.3 },
    },
    {
      ...STANDS.placeholder,
      ...SIZES.small,
    },
    {
      ...STANDS.nordmore,
      ...SIZES.small,
    },
  ]),
  ...calculateRow([
    {
      ...STANDS.ncl,
      ...SIZES.small,
      pos: { x: 576.3, y: 1597.3 },
    },
    {
      ...STANDS.placeholder,
      ...SIZES.small,
    },
    {
      ...STANDS.trust,
      ...SIZES.small,
    },
  ]),
  // Leftmost expo cluster
  ...calculateColumn([
    {
      ...STANDS.smashNorge,
      ...SIZES.longVertical,
      pos: { x: 376.3, y: 1394.3 },
    },
    ...calculateRow([
      {
        ...STANDS.bjerkely,
        ...SIZES.longVertical,
        pos: { x: 376.3, y: 1394.3 - stringToSize("3") },
      },
      {
        ...STANDS.placeholder,
        ...SIZES.superlongVertical,
      },
    ]),
    {
      ...STANDS.nettpatruljen,
      ...SIZES.medium,
      pos: { x: 376.3, y: 1394.3 - stringToSize("9") },
    },
  ]),
  // Center big stands expo cluster
  ...calculateColumn([
    {
      ...STANDS.hamarKommune,
      ...getStandSize("13x6"),
      pos: { x: 526.3, y: 1450.0 },
    },
    {
      ...STANDS.hellRobotics,
      ...getStandSize("6x12"),
    },
    ...calculateRow([
      {
        ...STANDS.biblogames,
        ...SIZES.long,
        pos: { x: 526.3, y: 1450.0 - stringToSize("15") },
      },
      {
        ...STANDS.telenor,
        ...getStandSize("7x15"),
      },
    ]),
  ]),
  // Rightmost expo cluster
  ...calculateColumn([
    ...calculateRow([
      {
        ...STANDS.kred,
        ...SIZES.long,
        pos: { x: 826.3, y: 1530.0 },
      },
      {
        ...STANDS.tineMRiis,
        ...SIZES.long,
      },
    ]),
    {
      ...STANDS.ungNo,
      ...SIZES.small,
      pos: { x: 826.3, y: 1530.0 - stringToSize("3") },
    },
    {
      ...STANDS.dicetrolls,
      ...SIZES.small,
    },
    ...calculateRow([
      {
        ...STANDS.metalheads,
        ...SIZES.longVertical,
        pos: { x: 826.3, y: 1530.0 - stringToSize("12") },
      },
      {
        ...STANDS.spillexpo,
        ...getStandSize("9x12"),
      },
    ]),
    ...calculateRow([
      {
        ...STANDS.riotGames,
        ...SIZES.long,
        pos: { x: 826.3, y: 1530.0 - stringToSize("15") },
      },
      {
        ...STANDS.tech,
        ...SIZES.small,
      },
      {
        ...STANDS.nlogic,
        ...SIZES.small,
      },
    ]),
  ]),
  // Streamer cluster
  ...calculateColumn([
    {
      ...ATTRACTIONS.streamerLounge,
      ...getStandSize("10x10"),
      pos: { x: 786.3, y: 1680.0 },
    },
    {
      ...ATTRACTIONS.streamers,
      ...getStandSize("10x3"),
    },
  ]),
  // TG Shop cluser, lower left above reception
  ...calculateColumn(
    [
      {
        ...ATTRACTIONS.tgShop,
        ...getStandSize("12x10"),
        pos: { x: 694, y: 736 },
      },
      {
        ...ATTRACTIONS.infodesk,
        ...getStandSize("12x5"),
      },
      {
        ...ATTRACTIONS.support,
        ...getStandSize("12x5"),
      },
    ],
    "up",
  ),
  // Left stage (stage right) cluster
  ...calculateRow([
    {
      ...ATTRACTIONS.chillout,
      ...getStandSize("10x18"),
      pos: { x: 1056.3, y: 1420.0 },
    },
  ]),
  ...calculateRow([
    {
      ...STANDS.outland,
      ...getStandSize("10x6"),
      pos: { x: 1056.3, y: 1420.0 - stringToSize("6") },
    },
  ]),
  // Creativia cluster right of stage (stage left)
  ...calculateColumn([
    {
      ...STAGES.creativiaStage,
      ...getStandSize("9x12"),
      pos: { x: 2070, y: 1640 },
    },
    {
      ...ATTRACTIONS.tgHack,
      ...getStandSize("9x6"),
    },
    {
      ...ATTRACTIONS.compoInfo,
      ...getStandSize("9x12"),
    },
  ]),
  {
    ...STAGES.mainStage,
    width: 280,
    height: 250,
    pos: { x: 1300, y: 1310 },
  },
  {
    ...STAGES.eSportStage,
    width: 280,
    height: 190,
    pos: { x: 1300, y: 1600 },
  },
].map((item, index) => ({
  ...item,
  slug: (item as MapItem)?.slug ?? `${slugifyMapItemName(item.name)}-${index}`,
}));

const usedLocations = LOCATIONS.flatMap(({ name, slug }) => [name, slug]);
const isUsed = ({ name, slug }: MapItemBase) =>
  usedLocations.includes(slug || "") || usedLocations.includes(name);
const nav = [
  {
    title: "Utstillere",
    items: Object.values(STANDS).filter(isUsed),
  },
  {
    title: "Mat",
    items: Object.values(FOOD).filter(isUsed),
  },
  {
    title: "Scener",
    items: Object.values(STAGES).filter(isUsed),
  },
].filter(({ items }) => items.length > 0);
---

<Layout title="The Gathering - Map" footerVariant="hidden">
  <meta name="robots" content="noindex" slot="head" />
  <TgMap locations={LOCATIONS}>
    <Fragment slot="nav">
      {
        nav.map(({ title, items }) => (
          <>
            <H3 class="mb-4">{title}</H3>
            <ul class="flex flex-row flex-wrap text-md font-bold text-white gap-2 mb-6">
              {items.map((item) => (
                <li>
                  <TgMapNavItem mapItem={item} />
                </li>
              ))}
            </ul>
          </>
        ))
      }
    </Fragment>
  </TgMap>
</Layout>
