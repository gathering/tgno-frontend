---
import "leaflet/dist/leaflet.css";
import { calculateRow } from "../../utils";
import TgMap from "../../components/map/TgMap.astro";
import type { MapItem, PartialMapItem } from "../../types";
import Layout from "../../layouts/Layout.astro";
import TgMapNavItem from "../../components/map/TgMapNavItem.astro";
import H3 from "../../components/H3.astro";

type MapItemBase = Pick<PartialMapItem, "icon" | "name"> &
  Partial<Omit<PartialMapItem, "icon" | "name">>;

type LocationMap = Record<string, MapItemBase>;

const STANDS: LocationMap = {
  kia: {
    icon: "/tg25/sponsors/kia_white.svg",
    name: "Kia",
    presentation: {
      type: "stand",
    },
  },
  kandu: {
    icon: "/tg25/sponsors/kandu.svg",
    name: "KANDU",
    presentation: {
      type: "stand",
    },
  },
  nexthop: {
    icon: "/tg25/sponsors/nexthop.svg",
    name: "NextHop",
    presentation: {
      type: "stand",
    },
  },
  riot: {
    icon: "/tg25/sponsors/riot_white.svg",
    name: "Riot Games",
    presentation: {
      type: "stand",
    },
  },
  nlogic: {
    icon: "/tg25/sponsors/nlogic.svg",
    name: "nLogic",
    presentation: {
      type: "stand",
    },
  },
  telenor: {
    icon: "/tg25/sponsors/telenor.svg",
    name: "Telenor",
    presentation: {
      type: "stand",
    },
  },
  placeholder: {
    icon: "/tg25/sponsors/kandu.svg",
    name: "Placeholder",
    presentation: {
      type: "stand",
    },
  },
};

const FOOD: LocationMap = {
  lorem: {
    icon: "/tg25/food/lorem.svg",
    name: "Lorem",
    presentation: {
      type: "unknown",
      interactive: false,
    },
  },
};

const STAGES: LocationMap = {
  mainStage: {
    icon: "https://www.tg.no/tg25/tg25_square_white.svg",
    name: "Hovedscenen",
    presentation: {
      type: "stage",
      calendarQuery: ["hovedscenen"],
      padding: 40,
    },
  },
  eSportStage: {
    icon: "https://www.tg.no/tg25/tg25_square_white.svg",
    name: "Esportscenen",
    presentation: {
      type: "stage",
      calendarQuery: ["esportscenen"],
      padding: 40,
    },
  },
  creativiaStage: {
    icon: "https://www.tg.no/tg25/tg25_square_white.svg",
    name: "Kreativiascenen",
    presentation: {
      type: "stage",
      calendarQuery: ["kreativiascenen"],
      padding: 40,
    },
  },
};

// Ex. "3"
const stringToSize = (sizeString: string) =>
  parseInt(sizeString || "1") * (47.3 / 3);
// Ex. "3x3"
const getStandSize = (
  sizeString: string,
): { width: number; height: number } => {
  const [width = stringToSize("1"), height = stringToSize("1")] = sizeString
    .split("x")
    .map(stringToSize);
  return { width, height };
};
const SIZES = {
  small: getStandSize("3x3"),
  medium: getStandSize("6x6"),
  long: getStandSize("6x3"),
  longVertical: getStandSize("3x6"),
  superlongVertical: getStandSize("3x9"),
};

const LOCATIONS: MapItem[] = [
  // Top left expo cluster
  ...calculateRow([
    {
      ...STANDS.placeholder,
      ...SIZES.small,
      pos: [576.3, 1644.3],
    },
    {
      ...STANDS.placeholder,
      ...SIZES.small,
    },
    {
      ...STANDS.placeholder,
      ...SIZES.small,
    },
  ]),
  ...calculateRow([
    {
      ...STANDS.placeholder,
      ...SIZES.small,
      pos: [576.3, 1597.3],
    },
    {
      ...STANDS.placeholder,
      ...SIZES.small,
    },
    {
      ...STANDS.placeholder,
      ...SIZES.small,
    },
  ]),
  // Leftmost expo cluster
  ...calculateRow([
    {
      ...STANDS.placeholder,
      ...SIZES.longVertical,
      pos: [376.3, 1394.3],
    },
  ]),
  ...calculateRow([
    {
      ...STANDS.placeholder,
      ...SIZES.longVertical,
      pos: [376.3, 1394.3 - stringToSize("3")],
    },
    {
      ...STANDS.placeholder,
      ...SIZES.superlongVertical,
    },
  ]),
  ...calculateRow([
    {
      ...STANDS.placeholder,
      ...SIZES.medium,
      pos: [376.3, 1394.3 - stringToSize("9")],
    },
  ]),
  // Center big stands expo cluster
  ...calculateRow([
    {
      ...STANDS.placeholder,
      ...getStandSize("13x6"),
      pos: [526.3, 1450.0],
    },
  ]),
  ...calculateRow([
    {
      ...STANDS.placeholder,
      ...getStandSize("6x12"),
      pos: [526.3, 1450.0 - stringToSize("12")],
    },
  ]),
  ...calculateRow([
    {
      ...STANDS.placeholder,
      ...SIZES.small,
      pos: [526.3, 1450.0 - stringToSize("15")],
    },
    {
      ...STANDS.placeholder,
      ...SIZES.small,
    },
    {
      ...STANDS.placeholder,
      ...getStandSize("7x15"),
    },
  ]),
  // Rightmost expo cluster
  ...calculateRow([
    {
      ...STANDS.placeholder,
      ...SIZES.long,
      pos: [826.3, 1530.0],
    },
    {
      ...STANDS.placeholder,
      ...SIZES.long,
    },
  ]),
  ...calculateRow([
    {
      ...STANDS.placeholder,
      ...SIZES.small,
      pos: [826.3, 1530.0 - stringToSize("3")],
    },
  ]),
  ...calculateRow([
    {
      ...STANDS.placeholder,
      ...SIZES.small,
      pos: [826.3, 1530.0 - stringToSize("6")],
    },
  ]),
  ...calculateRow([
    {
      ...STANDS.placeholder,
      ...SIZES.longVertical,
      pos: [826.3, 1530.0 - stringToSize("12")],
    },
    {
      ...STANDS.placeholder,
      ...getStandSize("9x12"),
    },
  ]),
  ...calculateRow([
    {
      ...STANDS.placeholder,
      ...SIZES.long,
      pos: [826.3, 1530.0 - stringToSize("15")],
    },
    {
      ...STANDS.placeholder,
      ...SIZES.small,
    },
    {
      ...STANDS.placeholder,
      ...SIZES.small,
    },
  ]),
  // Testing: Rough stages
  {
    ...STAGES.mainStage,
    width: 280,
    height: 250,
    pos: [1300, 1310],
  },
  {
    ...STAGES.eSportStage,
    width: 280,
    height: 190,
    pos: [1300, 1600],
  },
  {
    ...STAGES.creativiaStage,
    width: 140,
    height: 170,
    pos: [2070, 1630],
  },
];

const usedLocations = LOCATIONS.map(({ name }) => name);
const nav = [
  {
    title: "Utstillere",
    items: Object.values(STANDS).filter(({ name }) =>
      usedLocations.includes(name),
    ),
  },
  {
    title: "Mat",
    items: Object.values(FOOD).filter(({ name }) =>
      usedLocations.includes(name),
    ),
  },
  {
    title: "Scener",
    items: Object.values(STAGES).filter(({ name }) =>
      usedLocations.includes(name),
    ),
  },
].filter(({ items }) => items.length > 0);
---

<Layout title="The Gathering - Map" footerVariant="hidden">
  <meta name="robots" content="noindex" slot="head" />
  <TgMap locations={LOCATIONS}>
    <Fragment slot="nav">
      {
        nav.map(({ title, items }) => (
          <>
            <H3 class="mb-4">{title}</H3>
            <ul class="flex flex-row flex-wrap text-md font-bold text-white gap-2 mb-6">
              {items.map((item) => (
                <li>
                  <TgMapNavItem mapItem={item} />
                </li>
              ))}
            </ul>
          </>
        ))
      }
    </Fragment>
  </TgMap>
</Layout>
