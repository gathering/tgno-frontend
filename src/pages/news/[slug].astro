---
import type { Article } from "../../utils";

import H1 from "../../components/H1.astro";
import Main from "../../components/Main.astro";
import Layout from "../../layouts/Layout.astro";
import { fetchArticleIdBySlug, fetchArticleById } from "../../utils";

const { slug } = Astro.params;

if (!slug) {
  throw new Error("Slug is not defined");
}
const id = await fetchArticleIdBySlug({
  slug,
  api_url: import.meta.env.API_URL,
});

if (!id) {
  throw new Error("Article not found");
}

const article = await fetchArticleById({
  id,
  api_url: import.meta.env.API_URL,
});

// Fetch data from Wagtail API at build time or server-side
const articleData = await fetchArticleById({
  id,
  api_url: import.meta.env.API_URL,
});

// Function to replace <embed> tags with <img> tags for images
const processEmbedTags = (html: string) => {
  const imageBaseUrl = `${import.meta.env.API_URL}media/images/`;

  return html.replace(
    /<embed[^>]+embedtype="image"[^>]+id="(\d+)"[^>]+alt="([^"]+)"[^>]*>/g,
    (match, id, alt) => {
      return `<img src="${imageBaseUrl}${id}" alt="${alt}"/>`;
    },
  );
};

// Process embed tags to replace them with <img> tags
const finishedHtml = processEmbedTags(articleData.body);
---

<Layout title=`The Gathering - ${article.title}`>
  <Main>
    <!-- Article Title -->
    <H1 text=`${article.title}` />
    <!-- Display Tags -->
    <p class="text-sm text-gray-600 mb-2">
      {
        article.tags
          .filter((tag) => tag.name !== "NotNews") // Filter out the "NotNews" tag
          .map((tag) => {
            return tag.name
              .split(" ")
              .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
              .join(" ");
          })
          .join(", ")
      }
    </p>
    <!-- Publish Date -->
    <time
      datetime={article.meta.first_published_at}
      class="text-sm text-gray-500 mb-2 block"
    >
      {new Date(article.meta.first_published_at).toLocaleDateString()}
    </time>
    <!-- Author -->
    <table class="">
      <tbody class="text-sm text-gray-500 mb-2 block">
        {
          article.contributors.map((contributor) => (
            <tr>
              <td class="">{contributor.contribution_type}</td>
              <td class="">| {contributor.name}</td>
            </tr>
          ))
        }
      </tbody>
    </table>
    <!-- Main Image -->
    {
      article.main_image && (
        <img
          src={article.main_image.full_url}
          alt={article.main_image.alt}
          class="w-auto h-auto mb-4"
        />
      )
    }
    <!-- Article Content -->
    <div class="prose" set:html={finishedHtml} />
  </Main>
</Layout>
