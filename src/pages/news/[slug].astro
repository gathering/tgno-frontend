---
import H1 from "../../components/H1.astro";
import Main from "../../components/Main.astro";
import Layout from "../../layouts/Layout.astro";

interface Article {
  id: number;
  meta: {
    type: string;
    detail_url: string;
    html_url: string;
    slug: string;
    first_published_at: string;
  };
  title: string;
  intro: string;
  body: string;
  contributors: Array<{
    id: number;
    name: string;
    contribution_type: string;
    image?: string;
  }>;
  tags: Array<{
    id: number;
    name: string;
    slug: string;
  }>;
  main_image: {
    url: string;
    full_url: string;
    width: number;
    height: number;
    alt: string;
  };
}

const { slug } = Astro.params;
const fetchArticleIdBySlug = async (slug: string): Promise<number | null> => {
  const response = await fetch(
    `${import.meta.env.API_URL}api/v2/news/?&slug=${slug}`
  );
  const data = await response.json();
  const articles: Article[] = data.items;
  if (articles.length > 0) {
    return articles[0].id;
  } else {
    return null;
  }
};

if (!slug) {
  throw new Error("Slug is not defined");
}
const articleId = await fetchArticleIdBySlug(slug);

if (!articleId) {
  throw new Error("Article not found");
}

const fetchArticleById = async (id: number): Promise<Article> => {
  const response = await fetch(`${import.meta.env.API_URL}api/v2/news/${id}/`);
  const data = await response.json();
  return data;
};

const article = await fetchArticleById(articleId);

// Fetch data from Wagtail API at build time or server-side
const response = await fetch(
  `${import.meta.env.API_URL}api/v2/news/${articleId}/`
); // Adjust the URL to your endpoint
const articleData = await response.json();

// Function to replace <embed> tags with <img> tags for images
const processEmbedTags = (html: string) => {
  const imageBaseUrl = `${import.meta.env.API_URL}media/images/`;

  return html.replace(
    /<embed[^>]+embedtype="image"[^>]+id="(\d+)"[^>]+alt="([^"]+)"[^>]*>/g,
    (match, id, alt) => {
      return `<img src="${imageBaseUrl}${id}" alt="${alt}"/>`;
    }
  );
};

// Process embed tags to replace them with <img> tags
const finishedHtml = processEmbedTags(articleData.body);
---

<Layout title=`The Gathering - ${article.title}`>
  <Main>
    <!-- Article Title -->
    <H1 text=`${article.title}` />
    <!-- Display Tags -->
    <p class="text-sm text-gray-600 mb-2">
      {
        article.tags
          .filter((tag) => tag.name !== "NotNews") // Filter out the "NotNews" tag
          .map((tag) => {
            return tag.name
              .split(" ")
              .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
              .join(" ");
          })
          .join(", ")
      }
    </p>
    <!-- Publish Date -->
    <time
      datetime={article.meta.first_published_at}
      class="text-sm text-gray-500 mb-2 block">
      {new Date(article.meta.first_published_at).toLocaleDateString()}
    </time>
    <!-- Author -->
    <table class="">
      <tbody class="text-sm text-gray-500 mb-2 block">
        {
          article.contributors.map((contributor) => (
            <tr>
              <td class="">{contributor.contribution_type}</td>
              <td class="">| {contributor.name}</td>
            </tr>
          ))
        }
      </tbody>
    </table>
    <!-- Main Image -->
    {
      article.main_image && (
        <img
          src={article.main_image.full_url}
          alt={article.main_image.alt}
          class="w-auto h-auto mb-4"
        />
      )
    }
    <!-- Article Content -->
    <div class="prose" set:html={finishedHtml} />
  </Main>
</Layout>
