---
import ArrowSymbol from "../icons/ArrowSymbol.astro";

interface Props {
  startExpanded?: boolean;
  toggleVariant?: "header" | "footer";
}

const { startExpanded, toggleVariant } = Astro.props;
---

<script>
  class Collapsible extends HTMLElement {
    open = false;
    triggers: HTMLElement[] = [];
    collapsible: HTMLElement | null = null;

    toggle(open?: boolean) {
      this.open = typeof open !== "undefined" ? !open : !this.open;
      this.triggers.forEach((trigger) => {
        trigger.setAttribute("data-active", String(this.open));
        trigger.setAttribute("aria-expanded", String(this.open));
        trigger.classList.toggle("active", this.open);
      });
      if (this.collapsible) {
        this.collapsible.classList.toggle("collapsed", !this.open);
        this.collapsible.classList.toggle("expanded", this.open);
      }
    }

    connectedCallback() {
      this.open = this.getAttribute("data-start-expanded") === "true";
      this.triggers = Array.from(
        this.querySelectorAll("[data-part=collapsible-trigger"),
      );
      this.collapsible = this.querySelector("[data-part=collapsible");

      if (!this.collapsible) {
        return;
      }

      if (!this.triggers.length) {
        this.toggle(true);
        return;
      }

      this.triggers.forEach((trigger) =>
        trigger.addEventListener("click", () => this.toggle()),
      );
    }
  }

  customElements.define("tg-collapsible", Collapsible);
</script>

<style>
  .collapsed {
    display: none;
  }
  .expanded {
    display: flex;
  }
  [data-part="collapsible-trigger"].active.icon {
    transform: scaleY(-1);
  }
</style>

<tg-collapsible data-start-expanded={startExpanded}>
  <aside class="flex flex-row justify-between">
    <slot name="header" />
    {
      toggleVariant === "header" ? (
        <button
          data-part="collapsible-trigger"
          data-active={startExpanded}
          aria-expanded={startExpanded}
          class="icon"
        >
          <ArrowSymbol class="w-6 h-6" />
        </button>
      ) : null
    }
  </aside>
  <section
    data-part="collapsible"
    class={`group ${startExpanded ? "expanded" : "collapsed"}`}
  >
    <slot />
  </section>
  <aside>
    <slot name="footer" />
    {
      toggleVariant === "footer" ? (
        <button
          data-part="collapsible-trigger"
          data-active={startExpanded}
          aria-expanded={startExpanded}
        >
          Les mer
        </button>
      ) : null
    }
  </aside>
</tg-collapsible>
