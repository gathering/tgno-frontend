---
import type { Event } from "../../types";
import CalendardSymbol from "../icons/CalendardSymbol.astro";
import ClockSymbol from "../icons/ClockSymbol.astro";
import CancelSymbol from "../icons/CancelSymbol.astro";
import CloseSymbol from "../icons/CloseSymbol.astro";
import ArrowSymbol from "../icons/ArrowSymbol.astro";
import ExternalLinkSymbol from "../icons/ExternalLinkSymbol.astro";
import LiveSymbol from "../icons/LiveSymbol.astro";

type Props = Event & {
  expanded?: boolean;
  location?: {
    name: string;
    slug: string;
    url?: string;
    active?: boolean;
    color?: string;
  };
};

const {
  id,
  title,
  description,
  start,
  end,
  related_url,
  cancelled,
  facts,
  strings,
  expanded = false,
  location,
  tags,
} = Astro.props;
let style = "";

if (!expanded) {
  if (facts.ended) {
    style = "has-ended";
  } else if (["start", "both"].includes(facts.extendingQuery)) {
    style = "minimal";
  }
}

const hasNotice = tags.some((tag) => tag.slug === "notice");
// Let's rely on tag signal for now, but looking for unused signal in case it shows up
const isCancelled = cancelled || tags.some((tag) => tag.slug === "cancelled");

let duration = strings.duration;
let DurationSymbol = ClockSymbol;

switch (facts.extendingQuery) {
  case "start":
    duration = `${strings.startDate} ${strings.startTime} - ${strings.endTime}`;
    DurationSymbol = CalendardSymbol;
    break;
  case "end":
    duration = `${strings.startTime} - ${strings.endDate} ${strings.endTime}`;
    DurationSymbol = CalendardSymbol;
    break;
  case "both":
    duration = `${strings.startDate} ${strings.startTime} - ${strings.endDate} ${strings.endTime}`;
    DurationSymbol = CalendardSymbol;
    break;
}

if (expanded) {
  duration = `${strings.startDate} ${strings.startTime} - ${strings.endDate} ${strings.endTime}`;
  DurationSymbol = CalendardSymbol;
}

if (isCancelled) {
  duration = "Avlyst";
  DurationSymbol = CancelSymbol;
}
---

<style>
  [data-component="event"] {
    color: theme("colors.white");
    border-color: theme("colors.white");
    &.minimal {
    }
    &.has-ended {
      opacity: 0.5;
      display: none;
    }
    &.is-live {
      .live-symbol {
        display: flex;
      }
    }
    &.has-notice {
      .live-symbol {
        display: flex;
        color: theme("colors.yellow.600");
      }
    }
    &.is-cancelled {
      .live-symbol {
        display: flex;
        color: theme("colors.yellow.600");
      }
      .date {
        text-decoration: line-through;
      }
    }
  }
</style>

<script>
  // TODO: Make generic toggle script/component?
  const events: {
    event: Element;
    trigger: Element | null;
    collapsible: Element | null;
  }[] = [...document.querySelectorAll("[data-component='event']")].map(
    (event) => {
      const trigger = event.querySelector(
        "[data-part='event-details-trigger']",
      );
      const collapsible = event.querySelector("[data-part='event-details']");
      return { event, trigger, collapsible };
    },
  );

  const collapseAllEvents = () => {
    events.forEach(({ trigger, event }) => {
      if (!trigger) {
        return;
      }
      trigger.setAttribute("data-active", "false");
      trigger.setAttribute("aria-expanded", "false");
      event.classList.add("collapsed");
    });
  };

  events.forEach(({ trigger, event }) => {
    if (!trigger) {
      return;
    }

    trigger.addEventListener("click", () => {
      const active =
        (trigger.getAttribute("data-active") || "false") === "false";

      // We only allow expanding
      if (!active) {
        return;
      }

      collapseAllEvents();
      trigger.setAttribute("data-active", String(active));
      trigger.setAttribute("aria-expanded", String(active));
      event.classList.toggle("collapsed", !active);
    });
  });
</script>

<article
  data-component="event"
  class={`group ${expanded ? "" : "collapsed"} ${style} ${hasNotice ? "has-notice" : ""} ${isCancelled ? "is-cancelled" : ""}`}
  data-start={start}
  data-end={end}
>
  <div class={`flex flex-row pb-4 pt-2 border-t border-white text-2xl`}>
    <aside class="mr-4">
      {strings.startDateLong}
    </aside>
    <section class="ml-4 w-full">
      {
        location || related_url ? (
          <div class="flex flex-row mb-1 mt-2">
            <div class="text-md flex flex-row flex-wrap gap-2">
              {location ? (
                <a
                  href={location.url}
                  class={`rounded-md flex flex-row py-1 px-2 ${location.color ? "bg-" + location.color + "-500 text-black" : "text-white border-white"} ${location.url ? "hover:bg-white hover:text-backgroundSecondary" : ""} ${location.active ? "" : ""}`}
                >
                  {location.name}
                  {location.active && location.url ? <CloseSymbol /> : null}
                </a>
              ) : null}
            </div>
            {related_url ? (
              <a
                href={related_url}
                target="_blank"
                class="rounded-md h-fit p-2 ml-auto hover:bg-white hover:text-backgroundSecondary"
              >
                <ExternalLinkSymbol />
              </a>
            ) : null}
            <slot />
          </div>
        ) : null
      }
      <section
        {...description
          ? {
              "data-part": "event-details-trigger",
              "aria-controls": `event-${id}-details`,
              "data-active": "false",
              "aria-expanded": "false",
            }
          : {}}
        class={`text-md ${description ? "group-[.collapsed]:cursor-pointer group-[.collapsed]:hover:bg-white/10" : ""}`}
      >
        <h3 class="font-semibold text-3xl text-pretty mb-1 pt-1 flex flex-row">
          <span class="w-6 -ml-10 mr-5 mt-2 text-red-600 live-symbol hidden">
            <LiveSymbol />
          </span>
          {title}
        </h3>
        {
          description ? (
            <div
              class="mt-3 pb-2 group-[.collapsed]:hidden w-full"
              data-part="event-details"
              id={`event-${id}-details`}
              aria-role="details"
            >
              <p>{description}</p>
            </div>
          ) : null
        }
        <aside
          class={`flex flex-row gap-3 pb-3 w-full rounded-b-xl group-[.collapsed]:bg-transparent group-[.collapsed]:text-white`}
        >
          <time datetime={start} class="flex flex-row gap-3">
            <span class="flex w-6 mt-1">
              <DurationSymbol />
            </span>
            {duration}
          </time>
          <span
            class={`ml-auto hidden ${description ? "group-[.collapsed]:block" : ""}`}
          >
            <ArrowSymbol />
          </span>
        </aside>
      </section>
    </section>
  </div>
</article>
