---
import H2 from "../H2.astro";
interface Article {
  id: number;
  meta: {
    type: string;
    detail_url: string;
    html_url: string;
    slug: string;
    first_published_at: string;
  };
  title: string;
  tags: Array<{
    id: number;
    name: string;
    slug: string;
  }>;
  main_image?: {
    url: string;
    full_url: string;
    width: number;
    height: number;
    alt: string;
  };
}
type Props = {
  articleTags?: string[];
  limit?: number;
};
const { articleTags = [], limit = 6 } = Astro.props;

const fetchArticles = async (): Promise<Article[]> => {
  const url = new URL(`${import.meta.env.API_URL}api/v2/news/`);
  url.searchParams.set("fields", "title,tags,first_published_at,main_image");
  url.searchParams.set("limit", limit);

  if (articleTags?.length) {
    url.searchParams.set("tags", articleTags.join(","));
  }

  const response = await fetch(url.toString());
  const data = await response.json();
  const articles: Article[] = data.items;
  return articles;
};

const articles = await fetchArticles();
---

{
  (() => {
    if (articles.length === 0) {
      return (
        <section class="text-white p-8 rounded-3xl border-solid border-4 border-backgroundSecondary my-2">
          <a href="https://wannabe.gathering.org" class="container mx-auto">
            <h1 class="text-3xl font-bold text-center mb-6">
              Looks like something is missing here...
            </h1>
            <h1 class="text-3xl font-bold text-center mb-6">
              Can you help us find it?
            </h1>
          </a>
        </section>
      );
    } else {
      return (
        <section class="text-white p-8 rounded-3xl border-solid border-4 border-backgroundSecondary my-2">
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:px-44">
            {articles.map((article) => (
              <a href={`/news/${article.meta.slug}`}>
                <article class="overflow-hidden flex flex-row p-4">
                  <div class="flex-1">
                    <div class="text-sm text-orange-500">
                      {article.tags
                        .map((tag) => {
                          return (
                            tag.name.charAt(0).toUpperCase() + tag.name.slice(1)
                          );
                        })
                        .join(", ")}
                    </div>
                    <h3 class="text-xl text-white font-bold mt-2">
                      {article.title}
                    </h3>
                    <time
                      datetime={article.meta.first_published_at}
                      class="text-sm text-gray-500"
                    >
                      {new Date(
                        article.meta.first_published_at,
                      ).toLocaleDateString("en-US", {
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                      })}
                    </time>
                  </div>
                  {article.main_image && (
                    <img
                      src={article.main_image.full_url}
                      alt={article.main_image.alt}
                      class="w-24 h-24 object-cover ml-2 rounded-lg"
                    />
                  )}
                </article>
              </a>
            ))}
          </div>
        </section>
      );
    }
  })()
}
